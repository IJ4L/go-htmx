// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one

INSERT INTO product (name, category, price, image_url)
VALUES ($1, $2, $3, $4)
RETURNING product_id, name, category, price, image_url, created_at, updated_at
`

type CreateProductParams struct {
	Name     string         `json:"name"`
	Category pgtype.Text    `json:"category"`
	Price    pgtype.Numeric `json:"price"`
	ImageUrl pgtype.Text    `json:"image_url"`
}

// db/queries/product.sql
// Create a new product
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Category,
		arg.Price,
		arg.ImageUrl,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Category,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
WHERE product_id = $1
`

// Delete a product
func (q *Queries) DeleteProduct(ctx context.Context, productID int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getAllProductsWithPagination = `-- name: GetAllProductsWithPagination :many
SELECT product_id, name, category, price, image_url, created_at, updated_at
FROM product
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllProductsWithPaginationParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

// Get all products with pagination
func (q *Queries) GetAllProductsWithPagination(ctx context.Context, arg GetAllProductsWithPaginationParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProductsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Category,
			&i.Price,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT product_id, name, category, price, image_url, created_at, updated_at
FROM product
WHERE product_id = $1
`

// Get a product by id
func (q *Queries) GetProductById(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Category,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT product_id, name, category, price, image_url, created_at, updated_at
FROM product
WHERE category = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetProductsByCategoryParams struct {
	Category pgtype.Text `json:"category"`
	Limit    int64       `json:"limit"`
	Offset   int64       `json:"offset"`
}

// Get Products by category
func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Category,
			&i.Price,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalProductsByCategory = `-- name: GetTotalProductsByCategory :one
SELECT COUNT(*)
FROM product
WHERE category = $1
`

// Get Total Products by category
func (q *Queries) GetTotalProductsByCategory(ctx context.Context, category pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalProductsByCategory, category)
	var count int64
	err := row.Scan(&count)
	return count, err
}
